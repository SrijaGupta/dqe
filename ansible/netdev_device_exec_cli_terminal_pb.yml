---
###################################################################################
#
# Copyright 2020 Juniper Networks, Inc. All rights reserved.
# Licensed under the Juniper Networks Script Software License (the "License").
# You may not use this script file except in compliance with the License, which is 
# located at http://www.juniper.net/support/legal/scriptlicense/
# Unless required by applicable law or otherwise agreed to in writing by the 
# parties, software distributed under the License is distri buted on an 
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express 
# or implied.
#
##################################################################################
#
# Author        : Subrata Mazumdar, Juniper Networks Professional Services
# Contact       : subratam@juniper.net
# Company       : Juniper Networks
#
#
# Description   : Run this plabook to backup the Cluster-nodes based on the hostname(ip-address)
#
#                 How to run this playbook:
#                   ansible-playbook -vvv netdev_device_exec_cli_terminal_pb.yml
#
#


# - name: Install Custom OS Packages for cluster Nodes
#   # hosts: "{{ server_group_name }}"
#   hosts: cluster_servers
#   become: false
#   gather_facts: false
#   vars:
#     server_secripts_base_dir    : "/root"
# 
#   tasks:
#   - name: Upload the host-scripts for configuring guest-vms
#     synchronize :
#       copy_links: yes
#       src: "files/{{ item }}"
#       dest: "{{ server_secripts_base_dir }}"
#     with_items:
#       - cluster_utils
# 
#   - name: Forced Fail
#     fail:
# 

- name: Show Cluster Services Status in Terminal Window
  hosts: localhost
  gather_facts: false
  vars:
    terminal_profile: "Grass"
    script_run_id : "{{ 100000 | random(start=1000) }}"
    # server_status_term_windows_open_shell: "/var/tmp/{{ lookup('env', 'USER') }}_open_server_status_term_windows_{{ script_run_id}}.sh"
    server_group_name : 'cluster_servers_instances'
    server_watch_interval: "{{ lookup('env','SERVER_WATCH_INTERVAL') | default('30', true) }}"
    #
    server_docker_status_cmd: "watch -n {{ server_watch_interval }} docker container ls"
    server_status_cmd: "{{ server_docker_status_cmd }}"
    cluster_instnace_ip_list: "{{ groups[server_group_name] |  map('extract', hostvars, ['ansible_host'])  | list }}"
    server_user_name: "{{ login_user_name | default('root', true) }}"
  tasks:

  - name: Dump updated cluster toplogy data
    debug:
      msg: "server_group_name: {{ server_group_name }} cluster_instnace_ip_list: {{ cluster_instnace_ip_list }} server_status_cmd: {{ server_status_cmd }}"
  # - name: Forced Fail
  #   fail:
        # Note : synchronize module does not work properly on Linux. It copies fine but still fails and returns error code


  - name: Generate a 6 chars random id
    shell : "date '+%d%H%M'"
    register: xx_script_run_id

  - name: Set the file path for opening server terminals
    set_fact:
      server_status_term_windows_open_shell: "/var/tmp/{{ lookup('env', 'USER') }}_open_server_status_term_windows_{{ script_run_id}}.sh"

  - name: Build the Cluster node status command list
    set_fact:
      server_status_cmd_list_str : >-
        {% set ns = namespace({'server_status_cmd_list' : [] })               %}
        {% for instance_ip in cluster_instnace_ip_list                        %}
        {%   set server_instance = hostvars.values() | selectattr('ansible_host', 'defined') |  selectattr('ansible_host', 'equalto', instance_ip) | first %}
        {%   if (server_instance is defined)                                     %}
        {%   set instance_name = server_instance['inventory_hostname']        %}
        {%   set server_cmd =  server_status_cmd                              %}
        {%   set login_user_name =  "root"                                    %}
        {%   set instance_login_shell =  "bash"                               %}
        {%   if (server_cmd == "login")                                       %}
        {# 
        {%     set instance_login_shell = hostvars.values() | selectattr('ansible_host', 'equalto', instance_ip) | map(attribute='login_shell') | first | default('bash', true) %}
        {%     set login_user_name = hostvars.values() | selectattr('ansible_host', 'equalto', instance_ip) | map(attribute='login_user_name') | first | default('root', true) %}
        {%     set server_cmd = instance_login_shell                          %}
        #}
        {%     set instance_login_shell = server_instance['login_shell'] | default('bash', true) %}
        {%     set login_user_name = server_instance['login_user_name'] |  default('root', true) %}
        {%     set server_cmd = instance_login_shell                          %}
        {%   endif                                                            %}
        {%   set ssh_server_status_cmd = "ttab -s " + terminal_profile + " -t " + instance_name + " ssh -t " + login_user_name + "@" + instance_ip + " " + server_cmd + " " %}
        {%   set xx = ns.server_status_cmd_list.append(ssh_server_status_cmd) %}
        {%   endif                                                            %}
        {% endfor                                                             %}
        {{ ns.server_status_cmd_list | to_json }}

  - name: Build the Cluster node status command list
    set_fact:
      server_status_cmd_list : "{{ server_status_cmd_list_str | from_json }}"

  # - name: Forced Fail
  #   fail:

  - name: create an exec file for opening terminal windows 
    copy: 
      content: "{{ (server_status_cmd_list | join('; ')) + '\n' }}"
      dest: "{{ server_status_term_windows_open_shell }}"
      mode: u+rwx,go+rx 

  # - name: Forced Fail
  #   fail:

  - name: show Cluster status in terminal window
    shell:
      cmd: "ttab -s {{ terminal_profile }} -w  {{ server_status_term_windows_open_shell }} "
      # cmd: "ttab -w  {{ server_status_cmd_list | join(';')  }}"
    environment:
      - PATH : "{{ lookup('env', 'PATH') }}"

  - name: wait for all the window tabs to be created
    wait_for:
      timeout: "{{ (((cluster_instnace_ip_list | length) | int) * 3) }}"

  - name: remove the  exec file for opening terminal windows 
    when: false
    file: 
      path: "{{ server_status_term_windows_open_shell }}"
      state: absent

  # - name: Forced Fail
  #   fail:

# end-name

